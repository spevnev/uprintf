Sqlite's database: <#0> {
    sqlite3_vfs *pVfs = 0x558f46be8be0 (<#1> {
        int iVersion = 3
        int szOsFile = 120
        int mxPathname = 512
        sqlite3_vfs *pNext = 0x558f46beae60 ({
            int iVersion = 2
            int szOsFile = 120
            int mxPathname = 1024
            sqlite3_vfs *pNext = 0x558f46be8dd8 ({
                int iVersion = 3
                int szOsFile = 120
                int mxPathname = 512
                sqlite3_vfs *pNext = 0x558f46be8d30 ({
                    int iVersion = 3
                    int szOsFile = 120
                    int mxPathname = 512
                    sqlite3_vfs *pNext = 0x558f46be8c88 ({
                        int iVersion = 3
                        int szOsFile = 120
                        int mxPathname = 512
                        sqlite3_vfs *pNext = NULL
                        const char *zName = 0x558f46848680 ("unix-none")
                        void *pAppData = 0x558f4687aa40
                        int(sqlite3_vfs *, const char *, sqlite3_file *, int, int *) xOpen = 0x558f46535780 (int unixOpen(sqlite3_vfs *pVfs, const char *zPath, sqlite3_file *pFile, int flags, int *pOutFlags))
                        int(sqlite3_vfs *, const char *, int) xDelete = 0x558f46415330 (int unixDelete(sqlite3_vfs *NotUsed, const char *zPath, int dirSync))
                        int(sqlite3_vfs *, const char *, int, int *) xAccess = 0x558f462caf30 (int unixAccess(sqlite3_vfs *NotUsed, const char *zPath, int flags, int *pResOut))
                        int(sqlite3_vfs *, const char *, int, char *) xFullPathname = 0x558f46416d10 (int unixFullPathname(sqlite3_vfs *pVfs, const char *zPath, int nOut, char *zOut))
                        void *(sqlite3_vfs *, const char *) xDlOpen = 0x558f46257b80 (void *unixDlOpen(sqlite3_vfs *NotUsed, const char *zFilename))
                        void(sqlite3_vfs *, int, char *) xDlError = 0x558f463f1870 (void unixDlError(sqlite3_vfs *NotUsed, int nBuf, char *zBufOut))
                        (void())(sqlite3_vfs *, void *, const char *) xDlSym = 0x558f46257b70 ((void()) unixDlSym(sqlite3_vfs *NotUsed, void *p, const char *zSym))
                        void(sqlite3_vfs *, void *) xDlClose = 0x558f462b58b0 (void unixDlClose(sqlite3_vfs *NotUsed, void *pHandle))
                        int(sqlite3_vfs *, int, char *) xRandomness = 0x558f464135d0 (int unixRandomness(sqlite3_vfs *NotUsed, int nBuf, char *zBuf))
                        int(sqlite3_vfs *, int) xSleep = 0x558f46257a20 (int unixSleep(sqlite3_vfs *NotUsed, int microseconds))
                        int(sqlite3_vfs *, double *) xCurrentTime = 0x558f462ed2f0 (int unixCurrentTime(sqlite3_vfs *NotUsed, double *prNow))
                        int(sqlite3_vfs *, int, char *) xGetLastError = 0x558f46299ff0 (int unixGetLastError(sqlite3_vfs *NotUsed, int NotUsed2, char *NotUsed3))
                        int(sqlite3_vfs *, sqlite3_int64 *) xCurrentTimeInt64 = 0x558f462abf30 (int unixCurrentTimeInt64(sqlite3_vfs *NotUsed, sqlite3_int64 *piNow))
                        int(sqlite3_vfs *, const char *, void()) xSetSystemCall = 0x558f462b10e0 (int unixSetSystemCall(sqlite3_vfs *pNotUsed, const char *zName, void() pNewFunc))
                        (void())(sqlite3_vfs *, const char *) xGetSystemCall = 0x558f462b0f20 ((void()) unixGetSystemCall(sqlite3_vfs *pNotUsed, const char *zName))
                        const char *(sqlite3_vfs *, const char *) xNextSystemCall = 0x558f462b0c90 (const char *unixNextSystemCall(sqlite3_vfs *p, const char *zName))
                    })
                    const char *zName = 0x558f468486c0 ("unix-dotfile")
                    void *pAppData = 0x558f4687a940
                    int(sqlite3_vfs *, const char *, sqlite3_file *, int, int *) xOpen = 0x558f46535780 (int unixOpen(sqlite3_vfs *pVfs, const char *zPath, sqlite3_file *pFile, int flags, int *pOutFlags))
                    int(sqlite3_vfs *, const char *, int) xDelete = 0x558f46415330 (int unixDelete(sqlite3_vfs *NotUsed, const char *zPath, int dirSync))
                    int(sqlite3_vfs *, const char *, int, int *) xAccess = 0x558f462caf30 (int unixAccess(sqlite3_vfs *NotUsed, const char *zPath, int flags, int *pResOut))
                    int(sqlite3_vfs *, const char *, int, char *) xFullPathname = 0x558f46416d10 (int unixFullPathname(sqlite3_vfs *pVfs, const char *zPath, int nOut, char *zOut))
                    void *(sqlite3_vfs *, const char *) xDlOpen = 0x558f46257b80 (void *unixDlOpen(sqlite3_vfs *NotUsed, const char *zFilename))
                    void(sqlite3_vfs *, int, char *) xDlError = 0x558f463f1870 (void unixDlError(sqlite3_vfs *NotUsed, int nBuf, char *zBufOut))
                    (void())(sqlite3_vfs *, void *, const char *) xDlSym = 0x558f46257b70 ((void()) unixDlSym(sqlite3_vfs *NotUsed, void *p, const char *zSym))
                    void(sqlite3_vfs *, void *) xDlClose = 0x558f462b58b0 (void unixDlClose(sqlite3_vfs *NotUsed, void *pHandle))
                    int(sqlite3_vfs *, int, char *) xRandomness = 0x558f464135d0 (int unixRandomness(sqlite3_vfs *NotUsed, int nBuf, char *zBuf))
                    int(sqlite3_vfs *, int) xSleep = 0x558f46257a20 (int unixSleep(sqlite3_vfs *NotUsed, int microseconds))
                    int(sqlite3_vfs *, double *) xCurrentTime = 0x558f462ed2f0 (int unixCurrentTime(sqlite3_vfs *NotUsed, double *prNow))
                    int(sqlite3_vfs *, int, char *) xGetLastError = 0x558f46299ff0 (int unixGetLastError(sqlite3_vfs *NotUsed, int NotUsed2, char *NotUsed3))
                    int(sqlite3_vfs *, sqlite3_int64 *) xCurrentTimeInt64 = 0x558f462abf30 (int unixCurrentTimeInt64(sqlite3_vfs *NotUsed, sqlite3_int64 *piNow))
                    int(sqlite3_vfs *, const char *, void()) xSetSystemCall = 0x558f462b10e0 (int unixSetSystemCall(sqlite3_vfs *pNotUsed, const char *zName, void() pNewFunc))
                    (void())(sqlite3_vfs *, const char *) xGetSystemCall = 0x558f462b0f20 ((void()) unixGetSystemCall(sqlite3_vfs *pNotUsed, const char *zName))
                    const char *(sqlite3_vfs *, const char *) xNextSystemCall = 0x558f462b0c90 (const char *unixNextSystemCall(sqlite3_vfs *p, const char *zName))
                })
                const char *zName = 0x558f46837ea0 ("unix-excl")
                void *pAppData = 0x558f4687ab40
                int(sqlite3_vfs *, const char *, sqlite3_file *, int, int *) xOpen = 0x558f46535780 (int unixOpen(sqlite3_vfs *pVfs, const char *zPath, sqlite3_file *pFile, int flags, int *pOutFlags))
                int(sqlite3_vfs *, const char *, int) xDelete = 0x558f46415330 (int unixDelete(sqlite3_vfs *NotUsed, const char *zPath, int dirSync))
                int(sqlite3_vfs *, const char *, int, int *) xAccess = 0x558f462caf30 (int unixAccess(sqlite3_vfs *NotUsed, const char *zPath, int flags, int *pResOut))
                int(sqlite3_vfs *, const char *, int, char *) xFullPathname = 0x558f46416d10 (int unixFullPathname(sqlite3_vfs *pVfs, const char *zPath, int nOut, char *zOut))
                void *(sqlite3_vfs *, const char *) xDlOpen = 0x558f46257b80 (void *unixDlOpen(sqlite3_vfs *NotUsed, const char *zFilename))
                void(sqlite3_vfs *, int, char *) xDlError = 0x558f463f1870 (void unixDlError(sqlite3_vfs *NotUsed, int nBuf, char *zBufOut))
                (void())(sqlite3_vfs *, void *, const char *) xDlSym = 0x558f46257b70 ((void()) unixDlSym(sqlite3_vfs *NotUsed, void *p, const char *zSym))
                void(sqlite3_vfs *, void *) xDlClose = 0x558f462b58b0 (void unixDlClose(sqlite3_vfs *NotUsed, void *pHandle))
                int(sqlite3_vfs *, int, char *) xRandomness = 0x558f464135d0 (int unixRandomness(sqlite3_vfs *NotUsed, int nBuf, char *zBuf))
                int(sqlite3_vfs *, int) xSleep = 0x558f46257a20 (int unixSleep(sqlite3_vfs *NotUsed, int microseconds))
                int(sqlite3_vfs *, double *) xCurrentTime = 0x558f462ed2f0 (int unixCurrentTime(sqlite3_vfs *NotUsed, double *prNow))
                int(sqlite3_vfs *, int, char *) xGetLastError = 0x558f46299ff0 (int unixGetLastError(sqlite3_vfs *NotUsed, int NotUsed2, char *NotUsed3))
                int(sqlite3_vfs *, sqlite3_int64 *) xCurrentTimeInt64 = 0x558f462abf30 (int unixCurrentTimeInt64(sqlite3_vfs *NotUsed, sqlite3_int64 *piNow))
                int(sqlite3_vfs *, const char *, void()) xSetSystemCall = 0x558f462b10e0 (int unixSetSystemCall(sqlite3_vfs *pNotUsed, const char *zName, void() pNewFunc))
                (void())(sqlite3_vfs *, const char *) xGetSystemCall = 0x558f462b0f20 ((void()) unixGetSystemCall(sqlite3_vfs *pNotUsed, const char *zName))
                const char *(sqlite3_vfs *, const char *) xNextSystemCall = 0x558f462b0c90 (const char *unixNextSystemCall(sqlite3_vfs *p, const char *zName))
            })
            const char *zName = 0x558f4683fa80 ("memdb")
            void *pAppData = 0x558f46be8be0
            int(sqlite3_vfs *, const char *, sqlite3_file *, int, int *) xOpen = 0x558f46538cd0 (int memdbOpen(sqlite3_vfs *pVfs, const char *zName, sqlite3_file *pFd, int flags, int *pOutFlags))
            int(sqlite3_vfs *, const char *, int) xDelete = NULL
            int(sqlite3_vfs *, const char *, int, int *) xAccess = 0x558f46263d70 (int memdbAccess(sqlite3_vfs *pVfs, const char *zPath, int flags, int *pResOut))
            int(sqlite3_vfs *, const char *, int, char *) xFullPathname = 0x558f463f0c30 (int memdbFullPathname(sqlite3_vfs *pVfs, const char *zPath, int nOut, char *zOut))
            void *(sqlite3_vfs *, const char *) xDlOpen = 0x558f46263dd0 (void *memdbDlOpen(sqlite3_vfs *pVfs, const char *zPath))
            void(sqlite3_vfs *, int, char *) xDlError = 0x558f46263f60 (void memdbDlError(sqlite3_vfs *pVfs, int nByte, char *zErrMsg))
            (void())(sqlite3_vfs *, void *, const char *) xDlSym = 0x558f46264130 ((void()) memdbDlSym(sqlite3_vfs *pVfs, void *p, const char *zSym))
            void(sqlite3_vfs *, void *) xDlClose = 0x558f46264300 (void memdbDlClose(sqlite3_vfs *pVfs, void *pHandle))
            int(sqlite3_vfs *, int, char *) xRandomness = 0x558f46264490 (int memdbRandomness(sqlite3_vfs *pVfs, int nByte, char *zBufOut))
            int(sqlite3_vfs *, int) xSleep = 0x558f46264660 (int memdbSleep(sqlite3_vfs *pVfs, int nMicro))
            int(sqlite3_vfs *, double *) xCurrentTime = NULL
            int(sqlite3_vfs *, int, char *) xGetLastError = 0x558f462647f0 (int memdbGetLastError(sqlite3_vfs *pVfs, int a, char *b))
            int(sqlite3_vfs *, sqlite3_int64 *) xCurrentTimeInt64 = 0x558f462649d0 (int memdbCurrentTimeInt64(sqlite3_vfs *pVfs, sqlite3_int64 *p))
            int(sqlite3_vfs *, const char *, void()) xSetSystemCall = NULL
            (void())(sqlite3_vfs *, const char *) xGetSystemCall = NULL
            const char *(sqlite3_vfs *, const char *) xNextSystemCall = NULL
        })
        const char *zName = 0x558f46848640 ("unix")
        void *pAppData = 0x558f4687ab40
        int(sqlite3_vfs *, const char *, sqlite3_file *, int, int *) xOpen = 0x558f46535780 (int unixOpen(sqlite3_vfs *pVfs, const char *zPath, sqlite3_file *pFile, int flags, int *pOutFlags))
        int(sqlite3_vfs *, const char *, int) xDelete = 0x558f46415330 (int unixDelete(sqlite3_vfs *NotUsed, const char *zPath, int dirSync))
        int(sqlite3_vfs *, const char *, int, int *) xAccess = 0x558f462caf30 (int unixAccess(sqlite3_vfs *NotUsed, const char *zPath, int flags, int *pResOut))
        int(sqlite3_vfs *, const char *, int, char *) xFullPathname = 0x558f46416d10 (int unixFullPathname(sqlite3_vfs *pVfs, const char *zPath, int nOut, char *zOut))
        void *(sqlite3_vfs *, const char *) xDlOpen = 0x558f46257b80 (void *unixDlOpen(sqlite3_vfs *NotUsed, const char *zFilename))
        void(sqlite3_vfs *, int, char *) xDlError = 0x558f463f1870 (void unixDlError(sqlite3_vfs *NotUsed, int nBuf, char *zBufOut))
        (void())(sqlite3_vfs *, void *, const char *) xDlSym = 0x558f46257b70 ((void()) unixDlSym(sqlite3_vfs *NotUsed, void *p, const char *zSym))
        void(sqlite3_vfs *, void *) xDlClose = 0x558f462b58b0 (void unixDlClose(sqlite3_vfs *NotUsed, void *pHandle))
        int(sqlite3_vfs *, int, char *) xRandomness = 0x558f464135d0 (int unixRandomness(sqlite3_vfs *NotUsed, int nBuf, char *zBuf))
        int(sqlite3_vfs *, int) xSleep = 0x558f46257a20 (int unixSleep(sqlite3_vfs *NotUsed, int microseconds))
        int(sqlite3_vfs *, double *) xCurrentTime = 0x558f462ed2f0 (int unixCurrentTime(sqlite3_vfs *NotUsed, double *prNow))
        int(sqlite3_vfs *, int, char *) xGetLastError = 0x558f46299ff0 (int unixGetLastError(sqlite3_vfs *NotUsed, int NotUsed2, char *NotUsed3))
        int(sqlite3_vfs *, sqlite3_int64 *) xCurrentTimeInt64 = 0x558f462abf30 (int unixCurrentTimeInt64(sqlite3_vfs *NotUsed, sqlite3_int64 *piNow))
        int(sqlite3_vfs *, const char *, void()) xSetSystemCall = 0x558f462b10e0 (int unixSetSystemCall(sqlite3_vfs *pNotUsed, const char *zName, void() pNewFunc))
        (void())(sqlite3_vfs *, const char *) xGetSystemCall = 0x558f462b0f20 ((void()) unixGetSystemCall(sqlite3_vfs *pNotUsed, const char *zName))
        const char *(sqlite3_vfs *, const char *) xNextSystemCall = 0x558f462b0c90 (const char *unixNextSystemCall(sqlite3_vfs *p, const char *zName))
    })
    Vdbe *pVdbe = NULL
    CollSeq *pDfltColl = 0x7cb7991e0048 ({
        char *zName = 0x7cb7991e00c0 ("BINARY")
        u8 enc = 1
        void *pUser = NULL
        int(void *, int, const void *, int, const void *) xCmp = 0x558f462b58d0 (int binCollFunc(void *NotUsed, int nKey1, const void *pKey1, int nKey2, const void *pKey2))
        void(void *) xDel = NULL
    })
    sqlite3_mutex *mutex = 0x7c27991e0058 ({
        pthread_mutex_t mutex = <union> {
            __pthread_mutex_s __data = {
                int __lock = 0
                unsigned int __count = 0
                int __owner = 0
                unsigned int __nusers = 0
                int __kind = 1
                short int __spins = 0
                short int __elision = 0
                __pthread_list_t __list = {
                    __pthread_internal_list *__prev = NULL
                    __pthread_internal_list *__next = NULL
                }
            }
            char[] __size = [0 <repeats 16 times>, 1, 0 <repeats 23 times>]
            long int __align = 0
        }
    })
    Db *aDb = 0x7d67991e0320 ({
        char *zDbSName = 0x558f4682c100 ("main")
        Btree *pBt = 0x7c57991e0028 (<#2> {
            sqlite3 *db = 0x7d67991e0088 (<points to #0>)
            BtShared *pBt = 0x7cc7991e0048 ({
                Pager *pPager = 0x7d67991e0488 ({
                    sqlite3_vfs *pVfs = 0x558f46be8be0 (<points to #1>)
                    u8 exclusiveMode = 0
                    u8 journalMode = 0
                    u8 useJournal = 1
                    u8 noSync = 0
                    u8 fullSync = 1
                    u8 extraSync = 0
                    u8 syncFlags = 2
                    u8 walSyncFlags = 10
                    u8 tempFile = 0
                    u8 noLock = 0
                    u8 readOnly = 0
                    u8 memDb = 0
                    u8 memVfs = 0
                    u8 eState = 0
                    u8 eLock = 0
                    u8 changeCountDone = 0
                    u8 setSuper = 0
                    u8 doNotSpill = 0
                    u8 subjInMemory = 0
                    u8 bUseFetch = 0
                    u8 hasHeldSharedLock = 0
                    Pgno dbSize = 0
                    Pgno dbOrigSize = 0
                    Pgno dbFileSize = 0
                    Pgno dbHintSize = 0
                    int errCode = 0
                    int nRec = 0
                    u32 cksumInit = 0
                    u32 nSubRec = 0
                    Bitvec *pInJournal = NULL
                    sqlite3_file *fd = 0x7d67991e0610 ({
                        const sqlite3_io_methods *pMethods = 0x558f4687ab80 ({
                            int iVersion = 3
                            int(sqlite3_file *) xClose = 0x558f464125b0 (int unixClose(sqlite3_file *id))
                            int(sqlite3_file *, void *, int, sqlite3_int64) xRead = 0x558f462b3250 (int unixRead(sqlite3_file *id, void *pBuf, int amt, sqlite3_int64 offset))
                            int(sqlite3_file *, const void *, int, sqlite3_int64) xWrite = 0x558f462ea400 (int unixWrite(sqlite3_file *id, const void *pBuf, int amt, sqlite3_int64 offset))
                            int(sqlite3_file *, sqlite3_int64) xTruncate = 0x558f46413980 (int unixTruncate(sqlite3_file *id, i64 nByte))
                            int(sqlite3_file *, int) xSync = 0x558f46413e20 (int unixSync(sqlite3_file *id, int flags))
                            int(sqlite3_file *, sqlite3_int64 *) xFileSize = 0x558f46299c60 (int unixFileSize(sqlite3_file *id, i64 *pSize))
                            int(sqlite3_file *, int) xLock = 0x558f4632b4c0 (int unixLock(sqlite3_file *id, int eFileLock))
                            int(sqlite3_file *, int) xUnlock = 0x558f46411480 (int unixUnlock(sqlite3_file *id, int eFileLock))
                            int(sqlite3_file *, int *) xCheckReservedLock = 0x558f4629a050 (int unixCheckReservedLock(sqlite3_file *id, int *pResOut))
                            int(sqlite3_file *, int, void *) xFileControl = 0x558f4652e780 (int unixFileControl(sqlite3_file *id, int op, void *pArg))
                            int(sqlite3_file *) xSectorSize = 0x558f46263210 (int unixSectorSize(sqlite3_file *id))
                            int(sqlite3_file *) xDeviceCharacteristics = 0x558f46263290 (int unixDeviceCharacteristics(sqlite3_file *id))
                            int(sqlite3_file *, int, int, int, volatile void **) xShmMap = 0x558f46539810 (int unixShmMap(sqlite3_file *fd, int iRegion, int szRegion, int bExtend, volatile void **pp))
                            int(sqlite3_file *, int, int, int) xShmLock = 0x558f462b3ae0 (int unixShmLock(sqlite3_file *fd, int ofst, int n, int flags))
                            void(sqlite3_file *) xShmBarrier = 0x558f462f3c90 (void unixShmBarrier(sqlite3_file *fd))
                            int(sqlite3_file *, int) xShmUnmap = 0x558f46411de0 (int unixShmUnmap(sqlite3_file *fd, int deleteFlag))
                            int(sqlite3_file *, sqlite3_int64, int, void **) xFetch = 0x558f46414df0 (int unixFetch(sqlite3_file *fd, i64 iOff, int nAmt, void **pp))
                            int(sqlite3_file *, sqlite3_int64, void *) xUnfetch = 0x558f46263a00 (int unixUnfetch(sqlite3_file *fd, i64 iOff, void *p))
                        })
                    })
                    sqlite3_file *jfd = 0x7d67991e0700 ({
                        const sqlite3_io_methods *pMethods = NULL
                    })
                    sqlite3_file *sjfd = 0x7d67991e0688 ({
                        const sqlite3_io_methods *pMethods = NULL
                    })
                    i64 journalOff = 0
                    i64 journalHdr = 0
                    sqlite3_backup *pBackup = NULL
                    PagerSavepoint *aSavepoint = NULL
                    int nSavepoint = 0
                    u32 iDataVersion = 1
                    char[] dbFileVers = [0 <repeats 16 times>]
                    int nMmapOut = 0
                    sqlite3_int64 szMmap = 0
                    PgHdr *pMmapFreelist = NULL
                    u16 nExtra = 136
                    i16 nReserve = 0
                    u32 vfsFlags = 262
                    u32 sectorSize = 512
                    Pgno mxPgno = 4294967294
                    Pgno lckPgno = 262145
                    i64 pageSize = 4096
                    i64 journalSizeLimit = -1
                    char *zFilename = 0x7d67991e0784 ("/projects/uprintf/test.db")
                    char *zJournal = 0x7d67991e07a7 ("/projects/uprintf/test.db-journal")
                    int(void *) xBusyHandler = 0x558f4628e8a0 (int btreeInvokeBusyHandler(void *pArg))
                    void *pBusyHandlerArg = 0x7cc7991e0048
                    u32[] aStat = [0 <repeats 4 times>]
                    void(DbPage *) xReiniter = 0x558f46406680 (void pageReinit(DbPage *pData))
                    int(Pager *, Pgno, DbPage **, int) xGet = 0x558f464cfd90 (int getPageNormal(Pager *pPager, Pgno pgno, DbPage **ppPage, int flags))
                    char *pTmpSpace = 0x7df7991e0108 ("��������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"...)
                    PCache *pPCache = 0x7d67991e05c0 ({
                        PgHdr *pDirty = NULL
                        PgHdr *pDirtyTail = NULL
                        PgHdr *pSynced = NULL
                        i64 nRefSum = 0
                        int szCache = -2000
                        int szSpill = 1
                        int szPage = 4096
                        int szExtra = 136
                        u8 bPurgeable = 1
                        u8 eCreate = 2
                        int(void *, PgHdr *) xStress = 0x55eab364a590 (int pagerStress(void *p, PgHdr *pPg))
                        void *pStress = 0x7d46b89e0488
                        sqlite3_pcache *pCache = 0x7cb6b89e0048 ({} <opaque>)
                    })
                    Wal *pWal = NULL
                    char *zWal = 0x7d67991e07d1 ("/projects/uprintf/test.db-wal")
                })
                sqlite3 *db = 0x7d67991e0088 (<points to #0>)
                BtCursor *pCursor = NULL
                MemPage *pPage1 = NULL
                u8 openFlags = 0
                u8 autoVacuum = 0
                u8 incrVacuum = 0
                u8 bDoTruncate = 0
                u8 inTransaction = 0
                u8 max1bytePayload = 0
                u8 nReserveWanted = 0
                u16 btsFlags = 2
                u16 maxLocal = 0
                u16 minLocal = 0
                u16 maxLeaf = 0
                u16 minLeaf = 0
                u32 pageSize = 4096
                u32 usableSize = 4096
                int nTransaction = 0
                u32 nPage = 0
                void *pSchema = 0x7ca7991e0048
                void(void *) xFreeSchema = 0x558f46307070 (void sqlite3SchemaClear(void *p))
                sqlite3_mutex *mutex = NULL
                Bitvec *pHasContent = NULL
                int nRef = 1
                BtShared *pNext = NULL
                BtLock *pLock = NULL
                Btree *pWriter = NULL
                u8 *pTmpSpace = NULL
                int nPreformatSize = 0
            })
            u8 inTrans = 0
            u8 sharable = 0
            u8 locked = 0
            u8 hasIncrblobCur = 0
            int wantToLock = 0
            int nBackup = 0
            u32 iBDataVersion = 0
            Btree *pNext = NULL
            Btree *pPrev = NULL
            BtLock lock = {
                Btree *pBtree = 0x7c57991e0028 (<points to #2>)
                Pgno iTable = 1
                u8 eLock = 0
                BtLock *pNext = NULL
            }
        })
        u8 safety_level = 3
        u8 bSyncSet = 0
        Schema *pSchema = 0x7ca7991e0048 ({
            int schema_cookie = 0
            int iGeneration = 0
            Hash tblHash = {
                unsigned int htsize = 0
                unsigned int count = 0
                HashElem *first = NULL
                _ht *ht = NULL
            }
            Hash idxHash = {
                unsigned int htsize = 0
                unsigned int count = 0
                HashElem *first = NULL
                _ht *ht = NULL
            }
            Hash trigHash = {
                unsigned int htsize = 0
                unsigned int count = 0
                HashElem *first = NULL
                _ht *ht = NULL
            }
            Hash fkeyHash = {
                unsigned int htsize = 0
                unsigned int count = 0
                HashElem *first = NULL
                _ht *ht = NULL
            }
            Table *pSeqTab = NULL
            u8 file_format = 0
            u8 enc = 1
            u16 schemaFlags = 0
            int cache_size = 0
        })
    })
    int nDb = 2
    u32 mDbFlags = 0
    u64 flags = 3758391520
    i64 lastRowid = 0
    i64 szMmap = 0
    u32 nSchemaLock = 0
    unsigned int openFlags = 6
    int errCode = 0
    int errByteOffset = -1
    int errMask = 255
    int iSysErrno = 0
    u32 dbOptFlags = 0
    u8 enc = 1
    u8 autoCommit = 1
    u8 temp_store = 0
    u8 mallocFailed = 0
    u8 bBenignMalloc = 0
    u8 dfltLockMode = 0
    signed char nextAutovac = -1
    u8 suppressErr = 0
    u8 vtabOnConflict = 0
    u8 isTransactionSavepoint = 0
    u8 mTrace = 0
    u8 noSharedCache = 0
    u8 nSqlExec = 0
    u8 eOpenState = 118 ('v')
    int nextPagesize = 0
    i64 nChange = 0
    i64 nTotalChange = 0
    int[] aLimit = [1000000000, 1000000000, 2000, 1000, 500, 250000000, 127, 10, 50000, 32766, 1000, 0]
    int nMaxSorterMmap = 0
    sqlite3InitInfo init = {
        Pgno newTnum = 0
        u8 iDb = 0
        u8 busy = 0
        unsigned int orphanTrigger = 0 <1 bit>
        unsigned int imposterTable = 0 <1 bit>
        unsigned int reopenMemdb = 0 <1 bit>
        const char **azInit = 0x558f46beb260
    }
    int nVdbeActive = 0
    int nVdbeRead = 0
    int nVdbeWrite = 0
    int nVdbeExec = 0
    int nVDestroy = 0
    int nExtension = 0
    void **aExtension = NULL
    union trace = <union> {
        void(void *, const char *) xLegacy = NULL
        int(u32, void *, void *, void *) xV2 = NULL
    }
    void *pTraceArg = NULL
    void(void *, const char *, u64) xProfile = NULL
    void *pProfileArg = NULL
    void *pCommitArg = NULL
    int(void *) xCommitCallback = NULL
    void *pRollbackArg = NULL
    void(void *) xRollbackCallback = NULL
    void *pUpdateArg = NULL
    void(void *, int, const char *, const char *, sqlite_int64) xUpdateCallback = NULL
    void *pAutovacPagesArg = NULL
    void(void *) xAutovacDestr = NULL
    unsigned int(void *, const char *, u32, u32, u32) xAutovacPages = NULL
    Parse *pParse = NULL
    int(void *, sqlite3 *, const char *, int) xWalCallback = 0x558f46723900 (int sqlite3WalDefaultHook(void *pClientData, sqlite3 *db, const char *zDb, int nFrame))
    void *pWalArg = 0x3e8
    void(void *, sqlite3 *, int, const char *) xCollNeeded = NULL
    void(void *, sqlite3 *, int, const void *) xCollNeeded16 = NULL
    void *pCollNeededArg = NULL
    sqlite3_value *pErr = NULL
    union u1 = <union> {
        volatile int isInterrupted = 0
        double notUsed1 = 0.000000
    }
    Lookaside lookaside = {
        u32 bDisable = 0
        u16 sz = 1200
        u16 szTrue = 1200
        u8 bMalloced = 1
        u32 nSlot = 123
        u32[] anStat = [0, 0, 0]
        LookasideSlot *pInit = 0x7ec7991e8bf8 ({
            LookasideSlot *pNext = 0x7ec7991e8748 ({
                LookasideSlot *pNext = 0x7ec7991e8298 ({
                    LookasideSlot *pNext = 0x7ec7991e7de8 ({
                        LookasideSlot *pNext = 0x7ec7991e7938 ({
                            LookasideSlot *pNext = 0x7ec7991e7488 ({
                                LookasideSlot *pNext = 0x7ec7991e6fd8 ({
                                    LookasideSlot *pNext = 0x7ec7991e6b28 ({
                                        LookasideSlot *pNext = 0x7ec7991e6678 ({...})
                                    })
                                })
                            })
                        })
                    })
                })
            })
        })
        LookasideSlot *pFree = NULL
        LookasideSlot *pSmallInit = 0x7ec7991ebea8 ({
            LookasideSlot *pNext = 0x7ec7991ebe28 ({
                LookasideSlot *pNext = 0x7ec7991ebda8 ({
                    LookasideSlot *pNext = 0x7ec7991ebd28 ({
                        LookasideSlot *pNext = 0x7ec7991ebca8 ({
                            LookasideSlot *pNext = 0x7ec7991ebc28 ({
                                LookasideSlot *pNext = 0x7ec7991ebba8 ({
                                    LookasideSlot *pNext = 0x7ec7991ebb28 ({
                                        LookasideSlot *pNext = 0x7ec7991ebaa8 ({...})
                                    })
                                })
                            })
                        })
                    })
                })
            })
        })
        LookasideSlot *pSmallFree = NULL
        void *pMiddle = 0x7ec7991e90a8
        void *pStart = 0x7ec7991e0408
        void *pEnd = 0x7ec7991ebf28
        void *pTrueEnd = 0x7ec7991ebf28
    }
    int(void *, int, const char *, const char *, const char *, const char *) xAuth = NULL
    void *pAuthArg = NULL
    int(void *) xProgress = NULL
    void *pProgressArg = NULL
    unsigned int nProgressOps = 0
    int nVTrans = 0
    Hash aModule = {
        unsigned int htsize = 0
        unsigned int count = 2
        HashElem *first = 0x7c27991e0218 (<#3> {
            HashElem *next = 0x7c27991e01d8 ({
                HashElem *next = NULL
                HashElem *prev = 0x7c27991e0218 (<points to #3>)
                void *data = 0x7c57991e0098
                const char *pKey = 0x7c57991e00c8 ("json_each")
            })
            HashElem *prev = NULL
            void *data = 0x7c57991e0108
            const char *pKey = 0x7c57991e0138 ("json_tree")
        })
        _ht *ht = NULL
    }
    VtabCtx *pVtabCtx = NULL
    VTable **aVTrans = NULL
    VTable *pDisconnect = NULL
    Hash aFunc = {
        unsigned int htsize = 0
        unsigned int count = 1
        HashElem *first = 0x7c27991e0198 ({
            HashElem *next = NULL
            HashElem *prev = NULL
            void *data = 0x7c67991e00a8
            const char *pKey = 0x7c67991e00f0 ("match")
        })
        _ht *ht = NULL
    }
    Hash aCollSeq = {
        unsigned int htsize = 0
        unsigned int count = 3
        HashElem *first = 0x7c27991e0118 (<#4> {
            HashElem *next = 0x7c27991e00d8 (<#5> {
                HashElem *next = 0x7c27991e0098 ({
                    HashElem *next = NULL
                    HashElem *prev = 0x7c27991e00d8 (<points to #5>)
                    void *data = 0x7cb7991e0048
                    const char *pKey = 0x7cb7991e00c0 ("BINARY")
                })
                HashElem *prev = 0x7c27991e0118 (<points to #4>)
                void *data = 0x7cb7991e0118
                const char *pKey = 0x7cb7991e0190 ("NOCASE")
            })
            HashElem *prev = NULL
            void *data = 0x7cb7991e01e8
            const char *pKey = 0x7cb7991e0260 ("RTRIM")
        })
        _ht *ht = NULL
    }
    BusyHandler busyHandler = {
        int(void *, int) xBusyHandler = NULL
        void *pBusyArg = NULL
        int nBusy = 0
    }
    Db[] aDbStatic = [
        {
            char *zDbSName = 0x558f4682c100 ("main")
            Btree *pBt = 0x7c57991e0028 (<points to #2>)
            u8 safety_level = 3
            u8 bSyncSet = 0
            Schema *pSchema = 0x7ca7991e0048 ({
                int schema_cookie = 0
                int iGeneration = 0
                Hash tblHash = {
                    unsigned int htsize = 0
                    unsigned int count = 0
                    HashElem *first = NULL
                    _ht *ht = NULL
                }
                Hash idxHash = {
                    unsigned int htsize = 0
                    unsigned int count = 0
                    HashElem *first = NULL
                    _ht *ht = NULL
                }
                Hash trigHash = {
                    unsigned int htsize = 0
                    unsigned int count = 0
                    HashElem *first = NULL
                    _ht *ht = NULL
                }
                Hash fkeyHash = {
                    unsigned int htsize = 0
                    unsigned int count = 0
                    HashElem *first = NULL
                    _ht *ht = NULL
                }
                Table *pSeqTab = NULL
                u8 file_format = 0
                u8 enc = 1
                u16 schemaFlags = 0
                int cache_size = 0
            })
        },
        {
            char *zDbSName = 0x558f4682d7a0 ("temp")
            Btree *pBt = NULL
            u8 safety_level = 1
            u8 bSyncSet = 0
            Schema *pSchema = 0x7ca7991e0108 ({
                int schema_cookie = 0
                int iGeneration = 0
                Hash tblHash = {
                    unsigned int htsize = 0
                    unsigned int count = 0
                    HashElem *first = NULL
                    _ht *ht = NULL
                }
                Hash idxHash = {
                    unsigned int htsize = 0
                    unsigned int count = 0
                    HashElem *first = NULL
                    _ht *ht = NULL
                }
                Hash trigHash = {
                    unsigned int htsize = 0
                    unsigned int count = 0
                    HashElem *first = NULL
                    _ht *ht = NULL
                }
                Hash fkeyHash = {
                    unsigned int htsize = 0
                    unsigned int count = 0
                    HashElem *first = NULL
                    _ht *ht = NULL
                }
                Table *pSeqTab = NULL
                u8 file_format = 0
                u8 enc = 1
                u16 schemaFlags = 0
                int cache_size = 0
            })
        }
    ]
    Savepoint *pSavepoint = NULL
    int nAnalysisLimit = 0
    int busyTimeout = 0
    int nSavepoint = 0
    int nStatement = 0
    i64 nDeferredCons = 0
    i64 nDeferredImmCons = 0
    int *pnBytesFreed = NULL
    DbClientData *pDbData = NULL
}
num 1
num 2
num 3
num 4
num 5

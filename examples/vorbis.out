Vorbis data: {
    unsigned int sample_rate = 44100
    int channels = 2
    unsigned int setup_memory_required = 178512
    unsigned int temp_memory_required = 4096
    unsigned int setup_temp_memory_required = 7209
    char *vendor = 0x7b5c561e0010 ("Lavf58.20.100")
    int comment_list_length = 1
    char **comment_list = 0x7b5c561e0030
    FILE *f = 0x7c8c561e0300 (<ignored>)
    uint32 f_start = 0
    int close_on_free = 1
    uint8 *stream = NULL
    uint8 *stream_start = NULL
    uint8 *stream_end = NULL
    uint32 stream_len = 4115
    uint8 push_mode = 0
    uint32 first_audio_page_offset = 3998
    ProbedPage p_first = {
        uint32 page_start = 3998
        uint32 page_end = 4115
        uint32 last_decoded_sample = 44100
    }
    ProbedPage p_last = {
        uint32 page_start = 0
        uint32 page_end = 0
        uint32 last_decoded_sample = 0
    }
    stb_vorbis_alloc alloc = {
        char *alloc_buffer = NULL
        int alloc_buffer_length_in_bytes = 0
    }
    int setup_offset = 0
    int temp_offset = 0
    int eof = 0
    STBVorbisError error = VORBIS__no_error (0)
    int[] blocksize = [256, 2048]
    int blocksize_0 = 256
    int blocksize_1 = 2048
    int codebook_count = 38
    Codebook *codebooks = 0x7e5c561e0800 ({
        int dimensions = 1
        int entries = 64
        uint8 *codeword_lengths = 0x7b9c561e0080 ("\n\a\b\r\t\a\v\n\b\b\f\a\t\b\b\b\r\a\a\b\a\f\f\n\a\b\t\a\t\f\t\n¹–nÌ¹–nÌÐ")
        float minimum_value = 0.000000
        float delta_value = 0.000000
        uint8 value_bits = 0
        uint8 lookup_type = 0
        uint8 sequence_p = 0
        uint8 sparse = 0
        uint32 lookup_values = 0
        codetype *multiplicands = NULL
        uint32 *codewords = 0x7c4c561e0040 (0)
        int16[] fast_huffman = [0, 37, 22, 42, 20, 38, 34, 54, 17, 37, 26, 43, 21, 38, 39, 58, 6, 37, 22, 42, 25, 38, 35, 55, 18, 37, 33, 53, 21, 38, 41, 59, 5, 37, 22, 42, 24, 38, 34, 54, 17, 37, 26, 50, 21, 38, 39, 58, 10, 37, 22, 42, 25, 38, 36, 57, 18, 37, 33, 53, 21, 38, 41, 59, 1, 37, 22, 42, 20, 38, 34, 54, 17, 37, 26, 49, 21, 38, 39, 58, 8, 37, 22, 42, 25, 38, 40, 55, 18, 37, 33, 53, 21, 38, 41, 59, 5, 37, 22, 42, 32, 38, 34, 54, 17, 37, 26, 52, 21, 38, 39, 58, 16, 37, 22, 42, 25, 38, 36, 57, 18, 37, 33, 53, 21, 38, 41, 59, 2, 37, 22, 42, 20, 38, 34, 54, 17, 37, 26, 43, 21, 38, 39, 58, 6, 37, 22, 42, 25, 38, 35, 55, 18, 37, 33, 53, 21, 38, 41, 59, 5, 37, 22, 42, 27, 38, 34, 54, 17, 37, 26, 56, 21, 38, 39, 58, 23, 37, 22, 42, 25, 38, 36, 57, 18, 37, 33, 53, 21, 38, 41, 59, 1, 37, 22, 42, 20, 38, 34, 54, 17, 37, 26, 49, 21, 38, 39, 58, 9, 37, 22, 42, 25, 38, 48, 55, 18, 37, 33, 53, 21, 38, 41, 59, 5, 37, 22, 42, 32, 38, 34, 54, 17, 37, 26, 52, 21, 38, 39, 58, 16, 37, 22, 42, 25, 38, 36, 57, 18, 37, 33, 53, 21, 38, 41, 59, 4, 37, 22, 42, 20, 38, 34, 54, 17, 37, 26, 43, 21, 38, 39, 58, 6, 37, 22, 42, 25, 38, 35, 55, 18, 37, 33, 53, 21, 38, 41, 59, 5, 37, 22, 42, 24, 38, 34, 54, 17, 37, 26, 50, 21, 38, 39, 58, 10, 37, 22, 42, 25, 38, 36, 57, 18, 37, 33, 53, 21, 38, 41, 59, 1, 37, 22, 42, 20, 38, 34, 54, 17, 37, 26, 49, 21, 38, 39, 58, 19, 37, 22, 42, 25, 38, 40, 55, 18, 37, 33, 53, 21, 38, 41, 59, 5, 37, 22, 42, 32, 38, 34, 54, 17, 37, 26, 52, 21, 38, 39, 58, 16, 37, 22, 42, 25, 38, 36, 57, 18, 37, 33, 53, 21, 38, 41, 59, 2, 37, 22, 42, 20, 38, 34, 54, 17, 37, 26, 43, 21, 38, 39, 58, 6, 37, 22, 42, 25, 38, 35, 55, 18, 37, 33, 53, 21, 38, 41, 59, 5, 37, 22, 42, 27, 38, 34, 54, 17, 37, 26, 62, 21, 38, 39, 58, 23, 37, 22, 42, 25, 38, 36, 57, 18, 37, 33, 53, 21, 38, 41, 59, 1, 37, 22, 42, 20, 38, 34, 54, 17, 37, 26, 49, 21, 38, 39, 58, 9, 37, 22, 42, 25, 38, 51, 55, 18, 37, 33, 53, 21, 38, 41, 59, 5, 37, 22, 42, 32, 38, 34, 54, 17, 37, 26, 52, 21, 38, 39, 58, 16, 37, 22, 42, 25, 38, 36, 57, 18, 37, 33, 53, 21, 38, 41, 59, -1, 37, 22, 42, 20, 38, 34, 54, 17, 37, 26, 43, 21, 38, 39, 58, 6, 37, 22, 42, 25, 38, 35, 55, 18, 37, 33, 53, 21, 38, 41, 59, 5, 37, 22, 42, 24, 38, 34, 54, 17, 37, 26, 50, 21, 38, 39, 58, 10, 37, 22, 42, 25, 38, 36, 57, 18, 37, 33, 53, 21, 38, 41, 59, 1, 37, 22, 42, 20, 38, 34, 54, 17, 37, 26, 49, 21, 38, 39, 58, -1, 37, 22, 42, 25, 38, 40, 55, 18, 37, 33, 53, 21, 38, 41, 59, 5, 37, 22, 42, 32, 38, 34, 54, 17, 37, 26, 52, 21, 38, 39, 58, 16, 37, 22, 42, 25, 38, 36, 57, 18, 37, 33, 53, 21, 38, 41, 59, 2, 37, 22, 42, 20, 38, 34, 54, 17, 37, 26, 43, 21, 38, 39, 58, 6, 37, 22, 42, 25, 38, 35, 55, 18, 37, 33, 53, 21, 38, 41, 59, 5, 37, 22, 42, 27, 38, 34, 54, 17, 37, 26, 56, 21, 38, 39, 58, 23, 37, 22, 42, 25, 38, 36, 57, 18, 37, 33, 53, 21, 38, 41, 59, 1, 37, 22, 42, 20, 38, 34, 54, 17, 37, 26, 49, 21, 38, 39, 58, 9, 37, 22, 42, 25, 38, 63, 55, 18, 37, 33, 53, 21, 38, 41, 59, 5, 37, 22, 42, 32, 38, 34, 54, 17, 37, 26, 52, 21, 38, 39, 58, 16, 37, 22, 42, 25, 38, 36, 57, 18, 37, 33, 53, 21, 38, 41, 59, 4, 37, 22, 42, 20, 38, 34, 54, 17, 37, 26, 43, 21, 38, 39, 58, 6, 37, 22, 42, 25, 38, 35, 55, 18, 37, 33, 53, 21, 38, 41, 59, 5, 37, 22, 42, 24, 38, 34, 54, 17, 37, 26, 50, 21, 38, 39, 58, 10, 37, 22, 42, 25, 38, 36, 57, 18, 37, 33, 53, 21, 38, 41, 59, 1, 37, 22, 42, 20, 38, 34, 54, 17, 37, 26, 49, 21, 38, 39, 58, 19, 37, 22, 42, 25, 38, 40, 55, 18, 37, 33, 53, 21, 38, 41, 59, 5, 37, 22, 42, 32, 38, 34, 54, 17, 37, 26, 52, 21, 38, 39, 58, 16, 37, 22, 42, 25, 38, 36, 57, 18, 37, 33, 53, 21, 38, 41, 59, 2, 37, 22, 42, 20, 38, 34, 54, 17, 37, 26, 43, 21, 38, 39, 58, 6, 37, 22, 42, 25, 38, 35, 55, 18, 37, 33, 53, 21, 38, 41, 59, 5, 37, 22, 42, 27, 38, 34, 54, 17, 37, 26, 62, 21, 38, 39, 58, 23, 37, 22, 42, 25, 38, 36, 57, 18, 37, 33, 53, 21, 38, 41, 59, 1, 37, 22, 42, 20, 38, 34, 54, 17, 37, 26, 49, 21, 38, 39, 58, 9, 37, 22, 42, 25, 38, 51, 55, 18, 37, 33, 53, 21, 38, 41, 59, 5, 37, 22, 42, 32, 38, 34, 54, 17, 37, 26, 52, 21, 38, 39, 58, 16, 37, 22, 42, 25, 38, 36, 57, 18, 37, 33, 53, 21, 38, 41, 59]
        uint32 *sorted_codewords = 0x7bac561e0020 (4194304)
        int *sorted_values = 0x7bac561e0094 (3)
        int sorted_entries = 17
    })
    int floor_count = 2
    uint16[] floor_types = [1, 1, 0 <repeats 62 times>]
    Floor *floor_config = 0x7d2c561e0080 (<union> {
        Floor0 floor0 = {
            uint8 order = 2
            uint16 rate = 48641
            uint16 bark_map_size = 48830
            uint8 amplitude_bits = 190
            uint8 amplitude_offset = 190
            uint8 number_of_books = 190
            uint8[] book_list = [190 <repeats 16 times>]
        }
        Floor1 floor1 = {
            uint8 partitions = 2
            uint8[] partition_class_list = [0, 1, 190 <repeats 30 times>]
            uint8[] class_dimensions = [3, 4, 190 <repeats 14 times>]
            uint8[] class_subclasses = [2, 2, 190 <repeats 14 times>]
            uint8[] class_masterbooks = [0, 1, 190 <repeats 14 times>]
            int16[][] subclass_books = [
                [-1, 2, 3, 4, -16706 <repeats 4 times>],
                [-1, 5, 6, 7, -16706 <repeats 4 times>],
                [-16706 <repeats 8 times>] <repeats 14 times>
            ]
            uint16[] Xlist = [0, 128, 14, 4, 58, 2, 8, 28, 90, 48830 <repeats 241 times>]
            uint8[] sorted_order = [0, 5, 3, 6, 2, 7, 4, 8, 1, 190 <repeats 241 times>]
            uint8[][] neighbors = [
                [190, 190],
                [190, 190],
                [0, 1],
                [0, 2],
                [2, 1],
                [0, 3],
                [3, 2],
                [2, 4],
                [4, 1],
                [190, 190] <repeats 241 times>
            ]
            uint8 floor1_multiplier = 4
            uint8 rangebits = 7
            int values = 9
        }
    })
    int residue_count = 2
    uint16[] residue_types = [2, 2, 0 <repeats 62 times>]
    Residue *residue_config = 0x7b9c561e0560 ({
        uint32 begin = 0
        uint32 end = 208
        uint32 part_size = 16
        uint8 classifications = 10
        uint8 classbook = 23
        uint8 **classdata = 0x7cbc561e1080
        int16[] *residue_books = 0x7c1c561e03c0 ([-1 <repeats 8 times>])
    })
    int mapping_count = 2
    Mapping *mapping = 0x7bbc561e04a0 ({
        uint16 coupling_steps = 1
        MappingChannel *chan = 0x7b5c561e1b30 ({
            uint8 magnitude = 0
            uint8 angle = 1
            uint8 mux = 0
        })
        uint8 submaps = 1
        uint8[] submap_floor = [0 <repeats 15 times>]
        uint8[] submap_residue = [0 <repeats 15 times>]
    })
    int mode_count = 2
    Mode[] mode_config = [
        {
            uint8 blockflag = 0
            uint8 mapping = 0
            uint16 windowtype = 0
            uint16 transformtype = 0
        },
        {
            uint8 blockflag = 1
            uint8 mapping = 1
            uint16 windowtype = 0
            uint16 transformtype = 0
        },
        {
            uint8 blockflag = 0
            uint8 mapping = 0
            uint16 windowtype = 0
            uint16 transformtype = 0
        } <repeats 62 times>
    ]
    uint32 total_samples = 0
    float[] channel_buffers = [0x7d8c561e0100 (0.000000), 0x7d8c561e2900 (0.000000), NULL <repeats 14 times>]
    float[] outputs = [NULL <repeats 16 times>]
    float[] previous_window = [0x7d4c561e1500 (0.000000), 0x7d4c561e2900 (0.000000), NULL <repeats 14 times>]
    int previous_length = 128
    int16[] finalY = [0x7b9c561e05c0 (-16706), 0x7b9c561e0620 (-16706), NULL <repeats 14 times>]
    uint32 current_loc = 0
    int current_loc_valid = 1
    float[] A = [0x7c8c561e1480 (1.000000), 0x7d4c561e3d00 (1.000000)]
    float[] B = [0x7c8c561e1700 (0.499991), 0x7d4c561e5100 (0.500000)]
    float[] C = [0x7c4c561e1bc0 (0.999699), 0x7d0c561e1480 (0.999995)]
    float[] window = [0x7c8c561e1980 (0.000059), 0x7d4c561e6500 (0.000001)]
    uint16[] bit_reverse = [0x7b9c561e0680 (0), 0x7c8c561e1c00 (0)]
    uint32 serial = 0
    int last_page = 2
    int segment_count = 45
    uint8[] segments = [1 <repeats 45 times>, 0 <repeats 210 times>]
    uint8 page_flag = 4
    uint8 bytes_in_seg = 0
    uint8 first_decode = 0
    int next_seg = 1
    int last_seg = 1
    int last_seg_which = 0
    uint32 acc = 0
    int valid_bits = 4
    int packet_bytes = 1
    int end_seg_with_known_loc = 44
    uint32 known_loc_for_packet = 44100
    int discard_samples_deferred = 0
    uint32 samples_output = 0
    int page_crc_tests = -1
    CRCscan[] scan = [
        {
            uint32 goal_crc = 0
            int bytes_left = 0
            uint32 crc_so_far = 0
            int bytes_done = 0
            uint32 sample_loc = 0
        } <repeats 4 times>
    ]
    int channel_buffer_start = 0
    int channel_buffer_end = 0
}

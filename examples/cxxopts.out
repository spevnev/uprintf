Options: {
    string m_program = {
        _Alloc_hider _M_dataplus = {
            char *_M_p = 0x7b3a0ed00810 ("test")
        }
        size_type _M_string_length = 4
        union <anonymous> = <union> {
            char[] _M_local_buf = [116 ('t'), 101 ('e'), 115 ('s'), 116 ('t'), 0 <repeats 12 times>]
            size_type _M_allocated_capacity = 1953719668
        }
    }
    String m_help_string = {
        _Alloc_hider _M_dataplus = {
            char *_M_p = 0x7b6a0fbe0040 ("A brief description")
        }
        size_type _M_string_length = 19
        union <anonymous> = <union> {
            char[] _M_local_buf = [19, 0 <repeats 15 times>]
            size_type _M_allocated_capacity = 19
        }
    }
    string m_custom_help = {
        _Alloc_hider _M_dataplus = {
            char *_M_p = 0x7b3a0ed00850 ("[OPTION...]")
        }
        size_type _M_string_length = 11
        union <anonymous> = <union> {
            char[] _M_local_buf = [91 ('['), 79 ('O'), 80 ('P'), 84 ('T'), 73 ('I'), 79 ('O'), 78 ('N'), 46 ('.'), 46 ('.'), 46 ('.'), 93 (']'), 0 <repeats 5 times>]
            size_type _M_allocated_capacity = 3336691550293872475
        }
    }
    string m_positional_help = {
        _Alloc_hider _M_dataplus = {
            char *_M_p = 0x7b6a0fbe0070 ("positional parameters")
        }
        size_type _M_string_length = 21
        union <anonymous> = <union> {
            char[] _M_local_buf = [21, 0 <repeats 15 times>]
            size_type _M_allocated_capacity = 21
        }
    }
    bool m_show_positional = false
    bool m_allow_unrecognised = false
    size_t m_width = 76
    bool m_tab_expansion = false
    shared_ptr<std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<cxxopts::OptionDetails>, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<cxxopts::OptionDetails> > > > > m_options = {
        element_type *_M_ptr = 0x7baa0fbe0030 ({
            _Hashtable _M_h = {
                _Hashtable_ebo_helper<std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, true> _M_hash = {
                    hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > _M_obj = {}
                }
                _Hashtable_ebo_helper<std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, true> _M_equal = {
                    equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > _M_obj = {}
                }
                _Hashtable_ebo_helper<std::allocator<std::__detail::_Hash_node<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<cxxopts::OptionDetails> >, true> >, true> _M_alloc = {
                    allocator<std::__detail::_Hash_node<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::shared_ptr<cxxopts::OptionDetails> >, true> > _M_obj = {}
                }
                __node_base **_M_buckets = 0x7bea0fbe0040
                size_type _M_bucket_count = 13
                __node_base _M_before_begin = {
                    _Hash_node_base *_M_nxt = 0x7b9a0fbe04a0 ({
                        _Hash_node_base *_M_nxt = 0x7b9a0fbe0320 ({
                            _Hash_node_base *_M_nxt = 0x7b9a0fbe0260 ({
                                _Hash_node_base *_M_nxt = 0x7b9a0fbe0380 ({
                                    _Hash_node_base *_M_nxt = 0x7b9a0fbe0200 ({
                                        _Hash_node_base *_M_nxt = 0x7b9a0fbe0140 ({...})
                                    })
                                })
                            })
                        })
                    })
                }
                size_type _M_element_count = 8
                _Prime_rehash_policy _M_rehash_policy = {
                    float _M_max_load_factor = 1.000000
                    size_t _M_next_resize = 13
                }
                __node_base *_M_single_bucket = NULL
            }
        })
        __shared_count<(__gnu_cxx::_Lock_policy)2> _M_refcount = {
            _Sp_counted_base<(__gnu_cxx::_Lock_policy)2> *_M_pi = 0x7baa0fbe0020 ({
                int(...) *_vptr._Sp_counted_base = 0x557ec5439440
                _Atomic_word _M_use_count = 1
                _Atomic_word _M_weak_count = 1
            })
        }
    }
    vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > m_positional = {
        _Vector_impl _M_impl = {
            basic_string<char, std::char_traits<char>, std::allocator<char> > *_M_start = NULL
            basic_string<char, std::char_traits<char>, std::allocator<char> > *_M_finish = NULL
            basic_string<char, std::char_traits<char>, std::allocator<char> > *_M_end_of_storage = NULL
        }
    }
    unordered_set<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > m_positional_set = {
        _Hashtable _M_h = {
            _Hashtable_ebo_helper<std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, true> _M_hash = {
                hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > _M_obj = {}
            }
            _Hashtable_ebo_helper<std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, true> _M_equal = {
                equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > _M_obj = {}
            }
            _Hashtable_ebo_helper<std::allocator<std::__detail::_Hash_node<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, true> >, true> _M_alloc = {
                allocator<std::__detail::_Hash_node<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, true> > _M_obj = {}
            }
            __node_base **_M_buckets = 0x7b3a0ed008f0
            size_type _M_bucket_count = 1
            __node_base _M_before_begin = {
                _Hash_node_base *_M_nxt = NULL
            }
            size_type _M_element_count = 0
            _Prime_rehash_policy _M_rehash_policy = {
                float _M_max_load_factor = 1.000000
                size_t _M_next_resize = 0
            }
            __node_base *_M_single_bucket = NULL
        }
    }
    vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > m_group = {
        _Vector_impl _M_impl = {
            basic_string<char, std::char_traits<char>, std::allocator<char> > *_M_start = 0x7b6a0fbe0100 ({
                _Alloc_hider _M_dataplus = {
                    char *_M_p = 0x7b6a0fbe0110 ("")
                }
                size_type _M_string_length = 0
                union <anonymous> = <union> {
                    char[] _M_local_buf = [0, -66 <repeats 15 times>]
                    size_type _M_allocated_capacity = 13744632839234567680
                }
            })
            basic_string<char, std::char_traits<char>, std::allocator<char> > *_M_finish = 0x7b6a0fbe0120 (<#0> {
                _Alloc_hider _M_dataplus = {
                    char *_M_p = 0x2000000202 (<out-of-bounds>)
                }
                size_type _M_string_length = 26
                union <anonymous> = <union> {
                    char[] _M_local_buf = [64 ('@'), 1, -66, 15, 106 ('j'), 123 ('{'), 0, 0, 3, 0 <repeats 7 times>]
                    size_type _M_allocated_capacity = 135695460860224
                }
            })
            basic_string<char, std::char_traits<char>, std::allocator<char> > *_M_end_of_storage = 0x7b6a0fbe0120 (<points to #0>)
        }
    }
    map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, cxxopts::HelpGroupDetails, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, cxxopts::HelpGroupDetails> > > m_help = {
        _Rep_type _M_t = {
            _Rb_tree_impl<std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, true> _M_impl = {
                less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > _M_key_compare = {}
                _Rb_tree_node_base _M_header = {
                    _Rb_tree_color _M_color = _S_red (0)
                    void *_M_parent = 0x7c1a0fbe0040
                    void *_M_left = 0x7c1a0fbe0040
                    void *_M_right = 0x7c1a0fbe0040
                }
                size_t _M_node_count = 1
            }
        }
    }
}
Result: {
    NameHashMap m_keys = {
        _Hashtable _M_h = {
            _Hashtable_ebo_helper<std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, true> _M_hash = {
                hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > _M_obj = {}
            }
            _Hashtable_ebo_helper<std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, true> _M_equal = {
                equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > _M_obj = {}
            }
            _Hashtable_ebo_helper<std::allocator<std::__detail::_Hash_node<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int>, true> >, true> _M_alloc = {
                allocator<std::__detail::_Hash_node<std::pair<const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int>, true> > _M_obj = {}
            }
            __node_base **_M_buckets = 0x7bea0fbe01a0
            size_type _M_bucket_count = 13
            __node_base _M_before_begin = {
                _Hash_node_base *_M_nxt = 0x7b9a0fbe0980 ({
                    _Hash_node_base *_M_nxt = 0x7b9a0fbe08c0 ({
                        _Hash_node_base *_M_nxt = 0x7b9a0fbe0860 ({
                            _Hash_node_base *_M_nxt = 0x7b9a0fbe0800 ({
                                _Hash_node_base *_M_nxt = 0x7b9a0fbe07a0 ({
                                    _Hash_node_base *_M_nxt = 0x7b9a0fbe0740 ({
                                        _Hash_node_base *_M_nxt = 0x7b9a0fbe0920 ({...})
                                    })
                                })
                            })
                        })
                    })
                })
            }
            size_type _M_element_count = 8
            _Prime_rehash_policy _M_rehash_policy = {
                float _M_max_load_factor = 1.000000
                size_t _M_next_resize = 13
            }
            __node_base *_M_single_bucket = NULL
        }
    }
    ParsedHashMap m_values = {
        _Hashtable _M_h = {
            _Hashtable_ebo_helper<std::hash<long unsigned int>, true> _M_hash = {
                hash<long unsigned int> _M_obj = {}
            }
            _Hashtable_ebo_helper<std::equal_to<long unsigned int>, true> _M_equal = {
                equal_to<long unsigned int> _M_obj = {}
            }
            _Hashtable_ebo_helper<std::allocator<std::__detail::_Hash_node<std::pair<long unsigned int const, cxxopts::OptionValue>, false> >, true> _M_alloc = {
                allocator<std::__detail::_Hash_node<std::pair<long unsigned int const, cxxopts::OptionValue>, false> > _M_obj = {}
            }
            __node_base **_M_buckets = 0x7bea0fbe00f0
            size_type _M_bucket_count = 13
            __node_base _M_before_begin = {
                _Hash_node_base *_M_nxt = 0x7b9a0fbe0680 ({
                    _Hash_node_base *_M_nxt = 0x7b9a0fbe0620 ({
                        _Hash_node_base *_M_nxt = 0x7b9a0fbe05c0 (<#0> {
                            _Hash_node_base *_M_nxt = 0x7b9a0fbe0500 ({
                                _Hash_node_base *_M_nxt = NULL
                            })
                        })
                    })
                })
            }
            size_type _M_element_count = 4
            _Prime_rehash_policy _M_rehash_policy = {
                float _M_max_load_factor = 1.000000
                size_t _M_next_resize = 13
            }
            __node_base *_M_single_bucket = NULL
        }
    }
    vector<cxxopts::KeyValue, std::allocator<cxxopts::KeyValue> > m_sequential = {
        _Vector_impl _M_impl = {
            KeyValue *_M_start = NULL
            KeyValue *_M_finish = NULL
            KeyValue *_M_end_of_storage = NULL
        }
    }
    vector<cxxopts::KeyValue, std::allocator<cxxopts::KeyValue> > m_defaults = {
        _Vector_impl _M_impl = {
            KeyValue *_M_start = 0x7c4a0fbe02c0 ({
                string m_key = {
                    _Alloc_hider _M_dataplus = {
                        char *_M_p = 0x7c4a0fbe02d0 ("help")
                    }
                    size_type _M_string_length = 4
                    union <anonymous> = <union> {
                        char[] _M_local_buf = [104 ('h'), 101 ('e'), 108 ('l'), 112 ('p'), 0, -66 <repeats 11 times>]
                        size_type _M_allocated_capacity = 13744632021876761960
                    }
                }
                string m_value = {
                    _Alloc_hider _M_dataplus = {
                        char *_M_p = 0x7c4a0fbe02f0 ("false")
                    }
                    size_type _M_string_length = 5
                    union <anonymous> = <union> {
                        char[] _M_local_buf = [102 ('f'), 97 ('a'), 108 ('l'), 115 ('s'), 101 ('e'), 0, -66 <repeats 10 times>]
                        size_type _M_allocated_capacity = 13744423548509512038
                    }
                }
            })
            KeyValue *_M_finish = 0x7c4a0fbe0380 ({
                string m_key = {
                    _Alloc_hider _M_dataplus = {
                        char *_M_p = 0xbebebebebebebebe (<out-of-bounds>)
                    }
                    size_type _M_string_length = 13744632839234567870
                    union <anonymous> = <union> {
                        char[] _M_local_buf = [-66 <repeats 16 times>]
                        size_type _M_allocated_capacity = 13744632839234567870
                    }
                }
                string m_value = {
                    _Alloc_hider _M_dataplus = {
                        char *_M_p = 0xbebebebebebebebe (<out-of-bounds>)
                    }
                    size_type _M_string_length = 13744632839234567870
                    union <anonymous> = <union> {
                        char[] _M_local_buf = [-66 <repeats 16 times>]
                        size_type _M_allocated_capacity = 13744632839234567870
                    }
                }
            })
            KeyValue *_M_end_of_storage = 0x7c4a0fbe03c0 ({
                string m_key = {
                    _Alloc_hider _M_dataplus = {
                        char *_M_p = 0xcc6e96b9cc6e96b9 (<out-of-bounds>)
                    }
                    size_type _M_string_length = 136657533535216
                    union <anonymous> = <union> {
                        char[] _M_local_buf = [0 <repeats 16 times>]
                        size_type _M_allocated_capacity = 0
                    }
                }
                string m_value = {
                    _Alloc_hider _M_dataplus = {
                        char *_M_p = NULL
                    }
                    size_type _M_string_length = 0
                    union <anonymous> = <union> {
                        char[] _M_local_buf = [3, 17, 0, 0, -16, 0, 0, 0, 97 ('a'), 0 <repeats 7 times>]
                        size_type _M_allocated_capacity = 1030792155395
                    }
                }
            })
        }
    }
    vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > m_unmatched = {
        _Vector_impl _M_impl = {
            basic_string<char, std::char_traits<char>, std::allocator<char> > *_M_start = NULL
            basic_string<char, std::char_traits<char>, std::allocator<char> > *_M_finish = NULL
            basic_string<char, std::char_traits<char>, std::allocator<char> > *_M_end_of_storage = NULL
        }
    }
}
